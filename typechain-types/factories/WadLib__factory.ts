/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { WadLib, WadLibInterface } from "../WadLib";

const _abi = [
  {
    inputs: [],
    name: "MULTIPLIER",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c4610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063059f8b16146038575b600080fd5b603e6052565b604051604991906075565b60405180910390f35b670de0b6b3a764000081565b6000819050919050565b606f81605e565b82525050565b6000602082019050608860008301846068565b9291505056fea26469706673582212200f960b8dda2aed58845f10950d5f2bf9576963617afb5b0048877e7c6f7e813b64736f6c63430008120033";

type WadLibConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WadLibConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WadLib__factory extends ContractFactory {
  constructor(...args: WadLibConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WadLib> {
    return super.deploy(overrides || {}) as Promise<WadLib>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WadLib {
    return super.attach(address) as WadLib;
  }
  override connect(signer: Signer): WadLib__factory {
    return super.connect(signer) as WadLib__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WadLibInterface {
    return new utils.Interface(_abi) as WadLibInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WadLib {
    return new Contract(address, _abi, signerOrProvider) as WadLib;
  }
}
